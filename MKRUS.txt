#include<bits/stdc++.h>
using namespace std;

class disjoint{
    vector<int>parent;
    vector<int>size;
    public:
    disjoint(int n){
       parent.resize(n+1);
       size.resize(n+1);
        for(int i =0;i<n;i++){
            parent[i]=i;
            size[i]=1;
        }
    }
    int FindUPar(int node){
        if(node==parent[node]){
            return node;
        }
        return parent[node]=FindUPar(parent[node]);

    }

    void UnionBySize(int u,int v)
    {
        int up_u=FindUPar(u);
        int up_v=FindUPar(v);

        if(up_u==up_v){
            return;
        }  

        if(size[up_u]>size[up_v]){
            parent[up_v]=up_u;
            size[up_u]=+size[up_v];
        }      
        else{
            parent[up_u]=up_v;
            size[up_v]+=size[up_u];
        }
    }

};

class Kruskal{
    public:

    int minSpanTree(vector<pair<int,int>>adj[],int n){
        vector<pair<int,pair<int,int>>>edges;
        int totalWeight=0;
        vector<pair<int,int>>mst;

       for(int i=0;i<n;i++){
        for(auto it :adj[i]){
            int u =i;
            int v=it.first;
            int ewt=it.second;

            edges.push_back({ewt,{u,v}});
            
        }
       }

       sort(edges.begin(),edges.end());

       disjoint ds(n);

       for(auto it :edges){
        int wt=it.first;
        int u=it.second.first;
        int v=it.second.second;
        if(ds.FindUPar(u)!=ds.FindUPar(v)){
            totalWeight=totalWeight+wt;
            mst.push_back({u,v});
            ds.UnionBySize(u,v);
        }
       }

    
        cout << "Edges in MST:\n";
        for (auto it : mst) {
            cout << it.first << " - " << it.second << "\n";
        }

        return totalWeight;
        

    }
 

};

int main() {
    int n,m;
    cout<<"Enter The value of Nodes:"<<endl;
    cin>>n;
    cout<<"Enter the value of Vertices :"<<endl;
    cin>>m;
    int u,v,wt;
    vector<pair<int, int>> adj[n];

    for(int i=0;i<m;i++){
        cout<<"Enter the u"<<endl;
        cin>>u;
        cout<<"Enter the v"<<endl;
        cin>>v;
        cout<<"Enter the weight"<<endl;
        cin>>wt;

        adj[u].push_back({v,wt});
        adj[v].push_back({u,wt});
        
    } 

    Kruskal k;

    int totalWeight = k.minSpanTree(adj, n);

    cout << "total weight of MST: " << totalWeight << endl;

    return 0;
}
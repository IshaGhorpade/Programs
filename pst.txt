#include <iostream>
#include <stack>
#include <string>
using namespace std;

// Define a node structure for the expression tree
struct TreeNode {
    char data;
    TreeNode* left;
    TreeNode* right;

    TreeNode(char val) : data(val), left(nullptr), right(nullptr) {}
};

// Function to check if a character is an operator
bool isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}

// Function to construct an expression tree from a postfix expression
TreeNode* constructExpressionTree(const string& postfix) {
    stack<TreeNode*> st;

    for (char c : postfix) {
        if (!isOperator(c)) {
            st.push(new TreeNode(c));
        } else {
            TreeNode* node = new TreeNode(c);
            node->right = st.top();
            st.pop();
            node->left = st.top();
            st.pop();
            st.push(node);
        }
    }
    return st.top();
}

// Non-Recursive In-Order Traversal
void nonRecursiveInOrder(TreeNode* root) {
    stack<TreeNode*> st;
    TreeNode* current = root;

    while (current != nullptr || !st.empty()) {
        while (current != nullptr) {
            st.push(current);
            current = current->left;
        }
        current = st.top();
        st.pop();
        cout << current->data << " ";
        current = current->right;
    }
}

// Non-Recursive Pre-Order Traversal
void nonRecursivePreOrder(TreeNode* root) {
    if (!root) return;

    stack<TreeNode*> st;
    st.push(root);

    while (!st.empty()) {
        TreeNode* current = st.top();
        st.pop();
        cout << current->data << " ";

        if (current->right) st.push(current->right);
        if (current->left) st.push(current->left);
    }
}

// Non-Recursive Post-Order Traversal
void nonRecursivePostOrder(TreeNode* root) {
    if (!root) return;

    stack<TreeNode*> st1, st2;
    st1.push(root);

    while (!st1.empty()) {
        TreeNode* current = st1.top();
        st1.pop();
        st2.push(current);

        if (current->left) st1.push(current->left);
        if (current->right) st1.push(current->right);
    }

    while (!st2.empty()) {
        cout << st2.top()->data << " ";
        st2.pop();
    }
}

int main() {
    string postfix;
    cout << "Enter a postfix expression: ";
    cin >> postfix;

    TreeNode* root = constructExpressionTree(postfix);

    cout << "Non-Recursive In-Order Traversal: ";
    nonRecursiveInOrder(root);
    cout << endl;

    cout << "Non-Recursive Pre-Order Traversal: ";
    nonRecursivePreOrder(root);
    cout << endl;

    cout << "Non-Recursive Post-Order Traversal: ";
    nonRecursivePostOrder(root);
    cout << endl;

    return 0;
}

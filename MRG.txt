#include <iostream>
using namespace std;

// Merge function to combine two sorted subarrays into a single sorted array
void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;       // Size of the left subarray
    int n2 = right - mid;          // Size of the right subarray

    // Create temporary arrays for the left and right subarrays
    int* L = new int[n1];
    int* R = new int[n2];

    // Copy data to temporary arrays L[] and R[]
    for (int i = 0; i < n1; ++i)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; ++j)
        R[j] = arr[mid + 1 + j];

    int i = 0, j = 0;       // Initial indices of left and right subarrays
    int k = left;           // Initial index of the merged subarray

    // Merge the two subarrays back into the original array
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            ++i;
        } else {
            arr[k] = R[j];
            ++j;
        }
        ++k;
    }

    // Copy the remaining elements of L[], if any
    while (i < n1) {
        arr[k] = L[i];
        ++i;
        ++k;
    }

    // Copy the remaining elements of R[], if any
    while (j < n2) {
        arr[k] = R[j];
        ++j;
        ++k;
    }

    // Free the dynamically allocated memory
    delete[] L;
    delete[] R;
}

// Function to implement merge sort
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;  // Calculate the middle point

        // Recursively sort the left and right halves
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);

        // Merge the sorted halves
        merge(arr, left, mid, right);
    }
}

// Function to print an array
void printArray(int arr[], int size) {
    for (int i = 0; i < size; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

// Main function
int main() {
    int n;

    // Input the number of students
    cout << "Enter the number of students: ";
    cin >> n;

    // Dynamically allocate an array to store the credits
    int* credits = new int[n];

    // Input the credits obtained by each student
    cout << "Enter the credits obtained by each student:\n";
    for (int i = 0; i < n; ++i) {
        cin >> credits[i];
    }

    // Display the credits before sorting
    cout << "Credits before sorting: ";
    printArray(credits, n);

    // Perform merge sort
    mergeSort(credits, 0, n - 1);

    // Display the credits after sorting
    cout << "Credits after sorting: ";
    printArray(credits, n);

    // Free the dynamically allocated memory
    delete[] credits;

    return 0;
}

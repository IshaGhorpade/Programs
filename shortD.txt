#include <iostream>
#include <vector>
#include <climits>
#include <queue>

using namespace std;

struct Edge {
    int to;
    int weight;
};

// Dijkstra's algorithm implementation
void dijkstra(int src, const vector<vector<Edge>>& graph, int n, vector<int>& distance) {
    // Initialize distances and priority queue
    distance.assign(n, INT_MAX);
    distance[src] = 0;

    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, src});

    while (!pq.empty()) {
        int currentDistance = pq.top().first;
        int currentNode = pq.top().second;
        pq.pop();

        // Skip if we already have a shorter distance
        if (currentDistance > distance[currentNode]) {
            continue;
        }

        // Explore neighbors
        for (const auto& edge : graph[currentNode]) {
            int newDistance = currentDistance + edge.weight;
            if (newDistance < distance[edge.to]) {
                distance[edge.to] = newDistance;
                pq.push({newDistance, edge.to});
            }
        }
    }
}

int main() {
    int n, m;

    // Input: number of nodes and edges
    cout << "Enter the number of nodes: ";
    cin >> n;
    cout << "Enter the number of edges: ";
    cin >> m;

    vector<vector<Edge>> graph(n);

    // Input: edges in the format (from to weight)
    cout << "Enter the edges in the format (from to weight):\n";
    for (int i = 0; i < m; ++i) {
        int from, to, weight;
        cin >> from >> to >> weight;
        graph[from].push_back({to, weight});
        graph[to].push_back({from, weight});  // For undirected graph
    }

    int src, dest;
    cout << "Enter the source node (A): ";
    cin >> src;
    cout << "Enter the destination node (B): ";
    cin >> dest;

    // Perform Dijkstra's algorithm
    vector<int> distance;
    dijkstra(src, graph, n, distance);

    // Print the shortest distance from source to all nodes
    cout << "\nShortest distance from node " << src << " to all nodes:\n";
    for (int i = 0; i < n; ++i) {
        if (distance[i] == INT_MAX) {
            cout << src << " to " << i << " : " << "No path\n";
        } else {
            cout << src << " to " << i << " : " << distance[i] << endl;
        }
    }

    // Print the shortest distance from source to destination
    if (distance[dest] == INT_MAX) {
        cout << "\nNo path exists from " << src << " to " << dest << endl;
    } else {
        cout << "\nShortest distance from " << src << " to " << dest << " is: " << distance[dest] << endl;
    }

    return 0;
}
